I am refactoring a project and I want to make it conform to the MVC pattern (model view control). There are three objects:
a ServerList (maintains a list of servers that are active) - this guy will be the controller
a Form - this is your standard .NET GUI
a DatabaseThingy - wrapper class that reads/writes to database. (don't ask me what it does, I can't touch or change this class)
my question is: to follow proper MVC design, it seems that the ServerList should hold references to Form and DatabaseThingy. But when creating a .NET app, it seems that we are forced to make the Form (the view of MVC) the owner of ServerList and DatabaseThingy. How would I properly break this down into an MVC design and who should "own" what?