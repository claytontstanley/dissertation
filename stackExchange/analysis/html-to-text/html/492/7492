<p>Stress testing is something that gets very little love in most death mar.., er I mean web projects. It's usually done at the last minute (or not at all), next to no time gets allocated to it, etc.</p>

<p>In the past I've picked a tool, installed it on my machine first, hit the home page, upping the concurrency settings. Then I'd write a simple login script, a simple site walkthrough (in an ecommerce site adding a few items to a cart and checkout). Then I'd rope in as many developers as I could, install the stress test tool on their machines and do a massive attack. If nothing broke I'd give up and wait for the actual traffic to kill the site for real. </p>

<p>Just hitting the homepage hard almost always would locate a major problem. More scalability problems would surface at the second stage, and even more - after the launch.</p>

<p>The tools I used were Microsoft Homer (aka <a href="http://www.microsoft.com/downloads/details.aspx?familyid=e2c0585a-062a-439e-a67d-75a89aa36495&amp;displaylang=en" rel="nofollow">Microsoft Web Application Stress Tool</a>) and <a href="http://www.pylot.org/" rel="nofollow">Pylot</a>.</p>

<p>The reports that these tools generated never made much sense to me, and I spent many hours trying to figure out what kind of concurrent load the site would be able to support. It was always worth it because the stupidest bugs and bottlenecks would always come up (like web server misconfigurations, for instance).</p>

<p>What have you done, what tools have you used, and what success have you had with your approach? The part that is most interesting to me is coming up with some kind of a meaningful formula for calculating the number of concurrent users an app can support from the numbers reported by the stress test application.</p>
