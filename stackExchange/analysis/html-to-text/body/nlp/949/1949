in
order
to
fully
use
linqtosql
in
an
asp.net
3.5
application
,
it
is
necessary
to
create
datacontext
class
(
which
is
usually
done
using
the
designer
in
vs
2008
)
.
from
the
ui
perspective
,
the
datacontext
is
a
design
of
the
section
of
your
database
that
you
would
like
to
expose
to
through
linqtosql
and
is
integral
in
setting
up
the
orm
feature
of
linqtosql
.
my
question
is
:
i
am
setting
up
a
project
that
us
a
large
database
where
all
table
are
interconnected
in
some
way
through
foreign
keys
.
my
first
inclination
is
to
make
one
huge
datacontext
class
that
model
the
entire
database
.
that
way
i
could
in
theory
(
though
i
do
n't
know
if
this
would
be
needed
in
practice
)
use
the
foreign
key
connection
that
are
generated
through
linqtosql
to
easily
go
between
related
object
in
my
code
,
insert
related
object
,
etc
.
however
,
after
giving
it
some
thought
,
i
am
now
thinking
that
it
may
make
more
sense
to
create
multiple
datacontext
class
,
each
one
relating
to
a
specific
namespace
or
logical
interrelated
section
within
my
database
.
my
main
concern
is
that
instantiating
and
disposing
one
huge
datacontext
class
all
the
time
for
individual
operation
that
relate
to
specific
area
of
the
database
would
be
impose
an
unnecessary
imposition
on
application
resource
.
additionally
,
it
is
easier
to
create
and
manage
smaller
datacontext
file
than
one
big
one
.
the
thing
that
i
would
lose
is
that
there
would
be
some
distant
section
of
the
database
that
would
not
be
navigable
through
linqtosql
(
even
though
a
chain
of
relationship
connects
them
in
the
actual
database
)
.
additionally
,
there
would
be
some
table
class
that
would
exist
in
more
than
one
datacontext
.
any
thought
or
experience
on
whether
multiple
datacontexts
(
corresponding
to
db
namespaces
)
are
appropriate
in
place
of
(
or
in
addition
to
)
one
very
large
datacontext
class
(
corresponding
to
the
whole
db
)
?