i
've
always
preferred
to
use
long
integer
a
primary
key
in
database
,
for
simplicity
and
(
assumed
)
speed.
but
when
using
a
rest
or
rails-like
url
scheme
for
object
instance
,
i
'd
then
end
up
with
urls
like
this
:
http
:
//example.com/user/783
and
then
the
assumption
is
that
there
are
also
user
with
ids
of
782
,
781
,
...
,
2
,
and
1.
assuming
that
the
web
app
in
question
is
secure
enough
to
prevent
people
entering
other
number
to
view
other
user
without
authorization
,
a
simple
sequentially-assigned
surrogate
key
also
``
leak
''
the
total
number
of
instance
(
older
than
this
one
)
,
in
this
case
user
,
which
might
be
privileged
information.
(
for
instance
,
i
am
user
#
726
in
stackoverflow.
)
would
a
uuid
/guid
be
a
better
solution
?
then
i
could
set
up
urls
like
this
:
http
:
//example.com/user/035a46e0-6550-11dd-ad8b-0800200c9a66
not
exactly
succinct
,
but
there
's
le
implied
information
about
user
on
display.
sure
,
it
smack
of
``
security
through
obscurity
''
which
is
no
substitute
for
proper
security
,
but
it
seems
at
least
a
little
more
secure.
is
that
benefit
worth
the
cost
and
complexity
of
implementing
uuids
for
web-addressable
object
instance
?
i
think
that
i
'd
still
want
to
use
integer
column
a
database
pks
just
to
speed
up
joins.
there
's
also
the
question
of
in-database
representation
of
uuids.
i
know
mysql
store
them
a
36-character
strings.
postgres
seems
to
have
a
more
efficient
internal
representation
(
128
bit
?
)
but
i
have
n't
tried
it
myself.
anyone
have
any
experience
with
this
?
update
:
for
those
who
asked
about
just
using
the
user
name
in
the
url
(
e.g.
,
http
:
//example.com/user/yukondude
)
,
that
work
fine
for
object
instance
with
name
that
are
unique
,
but
what
about
the
zillion
of
web
app
object
that
can
really
only
be
identified
by
number
?
orders
,
transaction
,
invoice
,
duplicate
image
name
,
stackoverflow
question
,
...