so
,
in
java
,
the
first
line
of
your
constructor
has
to
be
a
call
to
super
...
be
it
implicitly
calling
super
(
)
,
or
explicitly
calling
another
constructor.
what
i
want
to
know
is
,
why
ca
n't
i
put
a
try
block
around
that
?
my
specific
case
is
that
i
have
a
mock
class
for
a
test.
there
is
no
default
constructor
,
but
i
want
one
to
make
the
test
simpler
to
read.
i
also
want
to
wrap
the
exception
thrown
from
the
constructor
into
a
runtimeexception.
so
,
what
i
want
to
do
is
effectively
this
:
public
class
myclassmock
extends
myclass
{
public
myclassmock
(
)
{
try
{
super
(
0
)
;
}
catch
(
exception
e
)
{
throw
new
runtimeexception
(
e
)
;
}
}
//
mocked
method
}
but
java
complains
that
super
is
n't
the
first
statement.
my
workaround
:
public
class
myclassmock
extends
myclass
{
public
static
myclassmock
construct
(
)
{
try
{
return
new
myclassmock
(
)
;
}
catch
(
exception
e
)
{
throw
new
runtimeexception
(
e
)
;
}
}
public
myclassmock
(
)
throw
exception
{
super
(
0
)
;
}
//
mocked
method
}
is
this
the
best
workaround
?
why
doe
n't
java
let
me
do
the
former
?