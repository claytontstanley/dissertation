i
have
been
trying
to
find
a
really
fast
way
to
parse
yyyy-mm-dd
[
hh
:
mm
:
s
]
into
a
date
object.
here
are
the
3
way
i
have
tried
doing
it
and
the
time
it
take
each
method
to
parse
50,000
date
time
strings.
does
anyone
know
any
faster
way
of
doing
this
or
tip
to
speed
up
the
method
?
castmethod1
take
3673
m
castmethod2
take
3812
m
castmethod3
take
3931
m
private
function
castmethod1
(
datestring
:
string
)
:
date
{
if
(
datestring
==
null
)
{
return
null
;
}
var
year
:
int
=
int
(
datestring.substr
(
0,4
)
)
;
var
month
:
int
=
int
(
datestring.substr
(
5,2
)
)
-1
;
var
day
:
int
=
int
(
datestring.substr
(
8,2
)
)
;
if
(
year
==
0
&
&
month
==
0
&
&
day
==
0
)
{
return
null
;
}
if
(
datestring.length
==
10
)
{
return
new
date
(
year
,
month
,
day
)
;
}
var
hour
:
int
=
int
(
datestring.substr
(
11,2
)
)
;
var
minute
:
int
=
int
(
datestring.substr
(
14,2
)
)
;
var
second
:
int
=
int
(
datestring.substr
(
17,2
)
)
;
return
new
date
(
year
,
month
,
day
,
hour
,
minute
,
second
)
;
}
-
private
function
castmethod2
(
datestring
:
string
)
:
date
{
if
(
datestring
==
null
)
{
return
null
;
}
if
(
datestring.indexof
(
``
0000-00-00
''
)
!
=
-1
)
{
return
null
;
}
datestring
=
datestring.split
(
``
-
''
)
.join
(
``
/
''
)
;
return
new
date
(
date.parse
(
datestring
)
)
;
}
-
private
function
castmethod3
(
datestring
:
string
)
:
date
{
if
(
datestring
==
null
)
{
return
null
;
}
var
mainparts
:
array
=
datestring.split
(
``
``
)
;
var
dateparts
:
array
=
mainparts
[
0
]
.split
(
``
-
''
)
;
if
(
number
(
dateparts
[
0
]
)
+number
(
dateparts
[
1
]
)
+number
(
dateparts
[
2
]
)
==
0
)
{
return
null
;
}
return
new
date
(
date.parse
(
dateparts.join
(
``
/
''
)
+
(
mainparts
[
1
]
?
''
``
+mainparts
[
1
]
:
''
``
)
)
)
;
}