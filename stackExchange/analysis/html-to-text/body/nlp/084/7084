i
've
worked
on
a
number
of
different
embedded
system
.
they
have
all
used
typedefs
(
or
#
defines
)
for
type
such
a
uint32
.
this
is
a
good
technique
a
it
drive
home
the
size
of
the
type
to
the
programmer
and
make
you
more
conscious
of
chance
for
overflow
etc
.
but
on
some
system
you
know
that
the
compiler
and
processor
wo
n't
change
for
the
life
of
the
project
.
so
what
should
influence
your
decision
to
create
and
enforce
project-specific
type
?
edit
i
think
i
managed
to
lose
the
gist
of
my
question
,
and
maybe
it
's
really
two
.
with
embedded
programming
you
may
need
type
of
specific
size
for
interface
and
also
to
cope
with
restricted
resource
such
a
ram
.
this
ca
n't
be
avoided
,
but
you
can
choose
to
use
the
basic
type
from
the
compiler
.
for
everything
else
the
type
have
le
importance
.
you
need
to
be
careful
not
to
cause
overflow
and
may
need
to
watch
out
for
register
and
stack
usage
.
which
may
lead
you
to
uint16
,
uchar
.
using
type
such
a
uchar
can
add
compiler
'fluff
'
however
.
because
register
are
typically
larger
,
some
compiler
may
add
code
to
force
the
result
into
the
type
.
i++
;
can
become
add
reg,1
and
reg
,
0xff
which
is
unecessary
.
so
i
think
my
question
should
have
been
:
-
given
the
constraint
of
embedded
software
what
is
the
best
policy
to
set
for
a
project
which
will
have
many
people
working
on
it
-
not
all
of
whom
will
be
of
the
same
level
of
experience
.