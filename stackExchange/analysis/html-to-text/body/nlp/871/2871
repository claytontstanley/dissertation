what
would
be
the
best
way
to
fill
a
c
#
struct
from
a
byte
[
]
array
where
the
data
wa
from
a
c/c++
struct
?
the
c
struct
would
look
something
like
this
(
my
c
is
very
rusty
)
:
typedef
oldstuff
{
char
name
[
8
]
;
uint32
user
;
char
location
[
8
]
;
uint32
timestamp
;
uint32
sequence
;
char
tracking
[
16
]
;
char
filler
[
12
]
;
}
and
would
fill
something
like
this
:
[
structlayout
(
layoutkind.explicit
,
size
=
56
,
pack
=
1
)
]
public
struct
newstuff
{
[
marshalas
(
unmanagedtype.byvaltstr
,
sizeconst
=
8
)
]
[
fieldoffset
(
0
)
]
public
string
name
;
[
marshalas
(
unmanagedtype.u4
)
]
[
fieldoffset
(
8
)
]
public
uint
user
;
[
marshalas
(
unmanagedtype.byvaltstr
,
sizeconst
=
8
)
]
[
fieldoffset
(
12
)
]
public
string
location
;
[
marshalas
(
unmanagedtype.u4
)
]
[
fieldoffset
(
20
)
]
public
uint
timestamp
;
[
marshalas
(
unmanagedtype.u4
)
]
[
fieldoffset
(
24
)
]
public
uint
sequence
;
[
marshalas
(
unmanagedtype.byvaltstr
,
sizeconst
=
16
)
]
[
fieldoffset
(
28
)
]
public
string
tracking
;
}
what
is
best
way
to
copy
oldstuff
to
newstuff
,
if
oldstuff
wa
passed
a
byte
[
]
array
?
i
'm
currently
doing
something
like
the
following
,
but
it
feel
kind
of
clunky
.
gchandle
handle
;
newstuff
mystuff
;
int
buffersize
=
marshal.sizeof
(
typeof
(
newstuff
)
)
;
byte
[
]
buff
=
new
byte
[
buffersize
]
;
array.copy
(
somebytearray
,
0
,
buff
,
0
,
buffersize
)
;
handle
=
gchandle.alloc
(
buff
,
gchandletype.pinned
)
;
mystuff
=
(
newstuff
)
marshal.ptrtostructure
(
handle.addrofpinnedobject
(
)
,
typeof
(
newstuff
)
)
;
handle.free
(
)
;
is
there
better
way
to
accomplish
this
?