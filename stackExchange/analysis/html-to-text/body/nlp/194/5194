i
am
prototyping
some
c
#
3
collection
filter
and
came
across
this
.
i
have
a
collection
of
product
:
public
class
myproduct
{
public
string
name
{
get
;
set
;
}
public
double
price
{
get
;
set
;
}
public
string
description
{
get
;
set
;
}
}
var
myproducts
=
new
list
<
myproduct
>
{
new
myproduct
{
name
=
``
surfboard
''
,
price
=
144.99
,
description
=
``
most
important
thing
you
will
ever
own
.
``
}
,
new
myproduct
{
name
=
``
leash
''
,
price
=
29.28
,
description
=
``
keep
important
thing
close
to
you
.
``
}
,
new
myproduct
{
name
=
``
sun
screen
''
,
price
=
15.88
,
description
=
``
1000
spf
!
who
could
ask
for
more
?
``
}
}
;
now
if
i
use
linq
to
filter
it
work
a
expected
:
var
d
=
(
from
mp
in
myproducts
where
mp.price
<
50d
select
mp
)
;
and
if
i
use
the
where
extension
method
combined
with
a
lambda
the
filter
work
a
well
:
var
f
=
myproducts.where
(
mp
=
>
mp.price
<
50d
)
.tolist
(
)
;
question
:
what
is
the
difference
,
and
why
use
one
over
the
other
?