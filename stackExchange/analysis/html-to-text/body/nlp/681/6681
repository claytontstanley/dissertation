hi
guy
,
a
you
can
probably
tell
from
my
rep
,
i
have
just
got
my
invite
so
i
am
a
complete
n00b
!
:
d
first
off
i
would
like
to
say
thanks
to
jeff
and
the
team
for
what
look
like
is
going
to
be
an
excellent
site
for
the
community.
so
,
my
question
:
i
am
still
kinda
new
to
the
asp.net
world
,
so
i
could
be
way
off
base
here
,
but
so
far
this
is
to
the
best
of
my
(
limited
)
knowledge
!
lets
say
i
have
a
standard
business
object..
``
contact
''
in
the
business
namespace..
i
write
a
web
service
to
retrieve
a
contact
's
info
from
a
database
,
and
return
it.
i
then
write
a
client
application
to
request
said
details.
now
,
i
also
then
create
a
utility
method
that
take
a
``
contact
''
and
doe
some
magic
with
it
,
like
utils.buycontactnewhat
(
)
say..
which
of
course
take
the
contact
of
type
business.contact.
i
then
go
back
to
my
client
application
and
want
to
utilise
the
buycontactnewhat
method
,
so
i
add
a
reference
to
my
utils
namespace
and
there
it
is.
however
,
a
problem
arises
with
:
contact
c
=
mywebservice.getcontact
(
``
rob
)
;
utils.buycontactnewhat
(
c
)
;
//
<
<
error
here
since
the
return
type
of
getcontact
is
of
mywebservice.contact
and
not
business.contact
a
expected.
i
understand
why
this
is
,
because
when
accessing
a
web
service
,
you
are
actually
programming
against
the
proxy
class
generated
by
the
wsdl..
so
,
is
there
an
``
easier
''
way
to
deal
with
this
type
mismatch
?
i
wa
considering
perhaps
trying
to
create
a
generic
converter
class
that
us
reflection
to
ensure
two
object
have
the
same
structure
,
then
simply
transferring
the
value
across
from
one
to
the
other..
thanks
guy
,
sorry
for
the
long
question
,
just
wanted
to
ensure
i
explained
the
problem
clearly
:
)
edit
:
thanks
to
lance
fisher
for
the
answer
posted.
if
anyone
can
recommend
and
good
method
for
the
``
deep
copy
''
of
the
object
in
question
,
i
would
love
some
input
!
:
)
edit
:
thanks
to
dan
thompson
for
the
idea
on
copying
the
code
generated
by
vs
via
wsdl.
i
have
looked
at
that
sort
of
scenario
before
,
but
the
problem
is
that
the
service
are
succeptable
to
change
,
meaning
the
``
hack
''
requires
regen
,
re-copy
,
re-edit
etc.
i
have
+1
'd
this
though
since
it
is
a
good
idea
,
especially
for
service
that
are
pretty
mature
and
not
likely
to
change.
thanks
.