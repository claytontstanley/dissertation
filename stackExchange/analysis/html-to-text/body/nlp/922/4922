i
saw
this
in
another
question
in
reference
to
shortcoming
of
the
java
spec
:
there
are
more
shortcoming
and
this
is
a
subtle
topic
.
check
this
out
:
public
class
methodoverloading
{
public
static
void
hello
(
integer
x
)
{
system.out.println
(
``
integer
''
)
;
}
public
static
void
hello
(
long
x
)
{
system.out.println
(
``
long
''
)
;
}
public
static
void
main
(
string
[
]
args
)
{
int
i
=
5
;
hello
(
i
)
;
}
}
here
``
long
''
would
be
printed
(
have
n't
checked
it
myself
)
,
because
the
compiler
choses
>
widening
over
autoboxing
.
be
careful
when
using
autoboxing
or
do
n't
use
it
at
all
!
are
we
sure
that
this
is
actually
an
example
of
widening
instead
of
autoboxing
,
or
is
it
something
else
entirely
?
on
my
initial
scanning
,
i
would
agree
with
the
statement
that
the
output
would
be
``
long
''
on
the
basis
of
``
i
''
being
declared
a
a
primitive
and
not
an
object
.
however
,
if
you
changed
hello
(
long
x
)
to
hello
(
long
x
)
the
output
would
print
``
integer
''
what
's
really
going
on
here
?
i
know
nothing
about
the
compilers/bytecode
interpreter
for
java
...