most
people
with
a
degree
in
cs
will
certainly
know
what
big
o
stand
for
.
it
help
u
to
measure
how
(
in
)
efficient
an
algorithm
really
is
and
if
you
know
in
what
category
the
problem
you
are
trying
to
solve
lay
in
you
can
figure
out
if
it
is
still
possible
to
squeeze
out
that
little
extra
performance.1
but
i
'm
curious
,
how
do
you
calculate
or
approximate
the
complexity
of
your
algorithm
?
1
but
a
they
say
,
do
n't
overdo
it
,
premature
optimization
is
the
root
of
all
evil
,
and
optimization
without
a
justified
cause
should
deserve
that
name
a
well
.