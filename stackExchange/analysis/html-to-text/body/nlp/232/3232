i
'm
wondering
how
far
people
should
take
the
validation
of
e-mail
address
.
my
field
is
primarily
web-development
,
but
this
applies
anywhere
.
i
've
seen
a
few
approach
:
simply
checking
if
there
is
an
``
@
''
present
,
which
is
dead
simply
but
of
course
not
that
reliable
.
a
more
complex
regex
test
for
standard
e-mail
format
a
full
regex
against
rfc
2822
-
the
problem
with
this
is
that
often
an
e-mail
address
might
be
valid
but
it
is
probably
not
what
the
user
meant
dns
validation
smtp
validation
as
many
people
might
know
(
but
many
do
n't
)
,
e-mail
address
can
have
a
lot
of
strange
variation
that
most
people
do
n't
usually
consider
(
see
rfc
2822
3.4.1
)
,
but
you
have
to
think
about
the
goal
of
your
validation
:
are
you
simply
trying
to
ensure
that
an
e-mail
address
can
be
sent
to
an
address
,
or
that
it
is
what
the
user
probably
meant
to
put
in
(
which
is
unlikely
in
a
lot
of
the
more
obscure
case
of
otherwise
'valid
'
address
)
.
an
option
i
've
considered
is
simply
giving
a
warning
with
a
more
esoteric
address
but
still
allowing
the
request
to
go
through
,
but
this
doe
add
more
complexity
to
a
form
and
most
user
are
likely
to
be
confused
.
while
dns
validation
/
smtp
validation
seem
like
no-brainer
,
i
foresee
problem
where
the
dns
server/smtp
server
is
temporarily
down
and
a
user
is
unable
to
register
somewhere
,
or
the
user
's
smtp
server
doe
n't
support
the
required
feature
.
how
might
some
experienced
developer
out
here
handle
this
?
are
there
any
other
approach
than
the
one
i
've
listed
?
edit
:
i
completely
forgot
the
most
obvious
of
all
,
sending
a
confirmation
e-mail
!
thanks
to
answerer
for
pointing
that
one
out
.
yes
,
this
one
is
pretty
foolproof
,
but
it
doe
require
extra
hassle
on
the
part
of
everyone
involved
.
the
user
ha
to
fetch
some
e-mail
,
and
the
developer
need
to
remember
user
data
before
they
're
even
confirmed
a
valid
.