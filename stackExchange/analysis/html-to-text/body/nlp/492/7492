stress
testing
is
something
that
get
very
little
love
in
most
death
mar..
,
er
i
mean
web
project
.
it
's
usually
done
at
the
last
minute
(
or
not
at
all
)
,
next
to
no
time
get
allocated
to
it
,
etc
.
in
the
past
i
've
picked
a
tool
,
installed
it
on
my
machine
first
,
hit
the
home
page
,
upping
the
concurrency
setting
.
then
i
'd
write
a
simple
login
script
,
a
simple
site
walkthrough
(
in
an
ecommerce
site
adding
a
few
item
to
a
cart
and
checkout
)
.
then
i
'd
rope
in
a
many
developer
a
i
could
,
install
the
stress
test
tool
on
their
machine
and
do
a
massive
attack
.
if
nothing
broke
i
'd
give
up
and
wait
for
the
actual
traffic
to
kill
the
site
for
real
.
just
hitting
the
homepage
hard
almost
always
would
locate
a
major
problem
.
more
scalability
problem
would
surface
at
the
second
stage
,
and
even
more
-
after
the
launch
.
the
tool
i
used
were
microsoft
homer
(
aka
microsoft
web
application
stress
tool
)
and
pylot
.
the
report
that
these
tool
generated
never
made
much
sense
to
me
,
and
i
spent
many
hour
trying
to
figure
out
what
kind
of
concurrent
load
the
site
would
be
able
to
support
.
it
wa
always
worth
it
because
the
stupidest
bug
and
bottleneck
would
always
come
up
(
like
web
server
misconfigurations
,
for
instance
)
.
what
have
you
done
,
what
tool
have
you
used
,
and
what
success
have
you
had
with
your
approach
?
the
part
that
is
most
interesting
to
me
is
coming
up
with
some
kind
of
a
meaningful
formula
for
calculating
the
number
of
concurrent
user
an
app
can
support
from
the
number
reported
by
the
stress
test
application
.