i
've
had
a
hard
time
trying
to
find
good
example
of
how
to
manage
database
schema
and
data
between
development
,
test
,
and
production
server
.
here
's
our
setup
.
each
developer
ha
a
virtual
machine
running
our
app
and
the
mysql
database
.
it
is
their
personal
sandbox
to
do
whatever
they
want
.
currently
,
developer
will
make
a
change
to
the
sql
schema
and
do
a
dump
of
the
database
to
a
text
file
that
they
commit
into
svn
.
we
're
wanting
to
deploy
a
continuous
integration
development
server
that
will
always
be
running
the
latest
committed
code
.
if
we
do
that
now
,
it
will
reload
the
database
from
svn
for
each
build
.
we
have
a
test
(
virtual
)
server
that
run
``
release
candidate
.
``
deploying
to
the
test
server
is
currently
a
very
manual
process
,
and
usually
involves
me
loading
the
latest
sql
from
svn
and
tweaking
it
.
also
,
the
data
on
the
test
server
is
inconsistent
.
you
end
up
with
whatever
test
data
the
last
developer
to
commit
had
on
his
sandbox
server
.
where
everything
break
down
is
the
deployment
to
production
.
since
we
ca
n't
overwrite
the
live
data
with
test
data
,
this
involves
manually
re-creating
all
the
schema
change
.
if
there
were
a
large
number
of
schema
change
or
conversion
script
to
manipulate
the
data
,
this
can
get
really
hairy
.
if
the
problem
wa
just
the
schema
,
it
'd
be
an
easier
problem
,
but
there
is
``
base
''
data
in
the
database
that
is
updated
during
development
a
well
,
such
a
meta-data
in
security
and
permission
table
.
this
is
the
biggest
barrier
i
see
in
moving
toward
continuous
integration
and
one-step-builds
.
how
do
you
solve
it
?
a
follow-up
question
:
how
do
you
track
database
version
so
you
know
which
script
to
run
to
upgrade
a
given
database
instance
?
is
a
version
table
like
lance
mention
below
the
standard
procedure
?
thanks
for
the
reference
to
tarantino
.
i
'm
not
in
a
.net
environment
,
but
i
found
their
databasechangemangement
wiki
page
to
be
very
helpfull
.
especially
this
powerpoint
presentation
(
.ppt
)
i
'm
going
to
write
a
python
script
that
check
the
name
of
*.sql
script
in
a
given
directory
against
a
table
in
the
database
and
run
the
one
that
are
n't
there
in
order
based
on
a
integer
that
form
the
first
part
of
the
filename
.
if
it
is
,
a
i
suspect
it
will
be
,
a
pretty
simple
solution
then
i
'll
post
it
here
.
i
've
got
a
working
script
for
this
.
it
handle
initializing
the
db
if
it
doe
n't
exist
and
running
upgrade
script
a
necessary
.
there
are
also
switch
for
wiping
an
existing
database
and
importing
test
data
from
a
file
.
it
's
about
200
line
,
so
i
wo
n't
post
it
(
though
i
might
put
it
on
pastebin
if
there
's
interest
.
)