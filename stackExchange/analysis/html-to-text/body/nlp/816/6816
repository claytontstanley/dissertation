i
wa
hoping
someone
could
help
me
out
with
a
problem
i
'm
having
using
the
java
search
function
in
eclipse
on
a
particular
project.
when
using
the
java
search
on
one
particular
project
,
i
get
an
error
message
saying
'class
file
name
must
end
with
.class
'
(
see
stack
trace
below
)
.
this
doe
not
seem
to
be
happening
on
all
project
,
just
one
particular
one
,
so
perhaps
there
's
something
i
should
try
to
get
rebuilt
?
i
have
already
tried
project
-
>
clean
...
and
closing
eclipse
,
deleting
all
the
built
class
file
and
restarting
eclipse
to
no
avail.
the
only
reference
i
've
been
able
to
find
on
google
for
the
problem
is
at
http
:
//www.crazysquirrel.com/computing/java/eclipse/error-during-java-search.jspx
,
but
unfortunately
his
solution
(
closing
,
deleting
class
file
,
restarting
)
did
not
work
for
me.
if
anyone
can
suggest
something
to
try
,
or
there
's
any
more
info
i
can
gather
which
might
help
track
it
's
down
,
i
'd
greatly
appreciate
the
pointers.
version
:
3.4.0
build
id
:
i20080617-2000
also
just
found
this
thread
-
http
:
//www.myeclipseide.com/pnphpbb2-viewtopic-t-20067.html
-
which
indicates
the
same
problem
may
occur
when
the
project
name
contains
a
period.
unfortunately
,
that
's
not
the
case
in
my
setup
,
so
i
'm
still
stuck.
caused
by
:
java.lang.illegalargumentexception
:
class
file
name
must
end
with
.class
at
org.eclipse.jdt.internal.core.packagefragment.getclassfile
(
packagefragment.java:182
)
at
org.eclipse.jdt.internal.core.util.handlefactory.createopenable
(
handlefactory.java:109
)
at
org.eclipse.jdt.internal.core.search.matching.matchlocator.locatematches
(
matchlocator.java:1177
)
at
org.eclipse.jdt.internal.core.search.javasearchparticipant.locatematches
(
javasearchparticipant.java:94
)
at
org.eclipse.jdt.internal.core.search.basicsearchengine.findmatches
(
basicsearchengine.java:223
)
at
org.eclipse.jdt.internal.core.search.basicsearchengine.search
(
basicsearchengine.java:506
)
at
org.eclipse.jdt.core.search.searchengine.search
(
searchengine.java:551
)
at
org.eclipse.jdt.internal.corext.refactoring.refactoringsearchengine.internalsearch
(
refactoringsearchengine.java:142
)
at
org.eclipse.jdt.internal.corext.refactoring.refactoringsearchengine.search
(
refactoringsearchengine.java:129
)
at
org.eclipse.jdt.internal.corext.refactoring.rename.renametypeprocessor.initializereferences
(
renametypeprocessor.java:594
)
at
org.eclipse.jdt.internal.corext.refactoring.rename.renametypeprocessor.docheckfinalconditions
(
renametypeprocessor.java:522
)
at
org.eclipse.jdt.internal.corext.refactoring.rename.javarenameprocessor.checkfinalconditions
(
javarenameprocessor.java:45
)
at
org.eclipse.ltk.core.refactoring.participants.processorbasedrefactoring.checkfinalconditions
(
processorbasedrefactoring.java:225
)
at
org.eclipse.ltk.core.refactoring.refactoring.checkallconditions
(
refactoring.java:160
)
at
org.eclipse.jdt.internal.ui.refactoring.refactoringexecutionhelper
$
operation.run
(
refactoringexecutionhelper.java:77
)
at
org.eclipse.jdt.internal.core.batchoperation.executeoperation
(
batchoperation.java:39
)
at
org.eclipse.jdt.internal.core.javamodeloperation.run
(
javamodeloperation.java:709
)
at
org.eclipse.core.internal.resources.workspace.run
(
workspace.java:1800
)
at
org.eclipse.jdt.core.javacore.run
(
javacore.java:4650
)
at
org.eclipse.jdt.internal.ui.actions.workbenchrunnableadapter.run
(
workbenchrunnableadapter.java:92
)
at
org.eclipse.jface.operation.modalcontext
$
modalcontextthread.run
(
modalcontext.java:121
)
thanks
mcdowell
,
closing
and
opening
the
project
seems
to
have
fixed
it
(
at
least
for
now
)
.