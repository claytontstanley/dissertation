i
just
keep
stumbling
through
mocking
...
the
latest
disaster
wa
not
grokking
that
i
need
to
actually
push
result
inside
a
mock
object
of
ienumerable
...
here
's
a
sample
(
demonstration
only
of
ienumerable
,
not
actually
good
interaction-based
testing
!
)
:
using
system
;
using
system.collections.generic
;
using
rhino.mocks
;
using
mbunit.framework
;
[
testfixture
]
public
class
zootest
{
[
test
]
public
void
zoocagesanimals
(
)
{
mockrepository
mockery
=
new
mockrepository
(
)
;
izoo
zoo
=
new
zoo
(
)
;
//this
is
the
part
that
feel
wrong
to
create
ilist
<
ianimal
>
mockresults
=
mockery.dynamicmock
<
ilist
<
ianimal
>
>
(
)
;
ianimal
mocklion
=
mockery.dynamicmock
<
ianimal
>
(
)
;
ianimal
mockrhino
=
mockery.dynamicmock
<
ianimal
>
(
)
;
using
(
mockery.record
(
)
)
{
expect.call
(
zoo.animals
)
.return
(
mockresults
)
.repeat.once
(
)
;
}
using
(
mockery.playback
(
)
)
{
zoo.cagethe
(
mocklion
)
;
zoo.cagethe
(
mockrhino
)
;
assert.areequal
(
mockresults
,
new
list
<
ianimal
>
(
zoo.animals
)
)
;
}
}
}
public
class
zoo
:
izoo
{
private
ilist
<
ianimal
>
animal
=
new
list
<
ianimal
>
(
)
;
public
void
cagethe
(
ianimal
animal
)
{
animals.add
(
animal
)
;
}
public
ienumerable
<
ianimal
>
animals
{
get
{
foreach
(
ianimal
animal
in
animal
)
{
yield
return
animal
;
}
}
}
}
public
interface
ianimal
{
}
public
interface
izoo
{
ienumerable
<
ianimal
>
animals
{
get
;
}
void
cagethe
(
ianimal
animal
)
;
}
i
do
n't
like
how
i
got
it
to
work
for
the
following
reason
:
had
to
consume
the
ienumerable
result
into
ilist
,
i
understand
this
put
the
result
for
checking
onto
the
heap
had
to
setup
the
content
of
the
result
...
i
understand
this
a
well
,
but
my
main
point
is
to
test
that
zoo.animals
is
returning
ienumerable
,
and
even
better
,
that
we
're
using
``
yield
return
''
inside
any
suggestion
on
doing
this
better
,
or
simpler
?
edit
:
i
'm
trying
to
determine
the
optimal
way
to
test
the
interaction
between
ienumerable
and
whatever
i
'm
using.
i
'm
not
trying
to
test
that
zoo
can
hold
animal
,
rather
that
zoo
exposese
a
ienumerable
,
and
that
yield
return
is
getting
used
a
well
.