the
new
extension
in
.net
3.5
allow
functionality
to
be
split
out
from
interface
.
for
instance
in
.net
2.0
public
interface
ihavechildren
{
string
parenttype
{
get
;
}
int
parentid
{
get
;
}
list
<
ichild
>
getchildren
(
)
}
can
(
in
3.5
)
become
:
public
interface
ihavechildren
{
string
parenttype
{
get
;
}
int
parentid
{
get
;
}
}
public
static
class
havechildrenextension
{
public
static
list
<
ichild
>
getchildren
(
this
ihavechildren
)
{
//logic
to
get
child
by
parent
type
and
id
//shared
for
all
class
implementing
ihavechildren
}
}
this
seems
to
me
to
be
a
better
mechanism
for
many
interface
.
they
no
longer
need
an
abstract
base
to
share
this
code
,
and
functionally
the
code
work
the
same
.
this
could
make
code
more
maintainable
and
easier
to
test
.
the
only
disadvantage
being
that
an
abstract
base
implementation
can
be
virtual
,
but
can
that
be
worked
around
(
would
an
instance
method
hide
an
extension
method
with
the
same
name
?
would
it
be
confusing
code
to
do
so
?
)
any
other
reason
not
to
regularly
use
this
pattern
?
clarification
:
yeah
,
i
see
the
tendency
with
extension
method
is
to
end
up
with
them
everywhere
.
i
'd
be
particularly
careful
having
any
on
.net
value
type
without
a
great
deal
of
peer
review
(
i
think
the
only
one
we
have
on
string
is
a
.splittodictionary
(
)
-
similar
to
.split
(
)
but
taking
a
key-value
delimiter
too
)
i
think
there
's
a
whole
best
practice
debate
there
;
-
)
(
incidentally
:
dannysmurf
,
your
pm
sound
scary
.
)
i
'm
specifically
asking
here
about
using
extension
method
where
previously
we
had
interface
method
.
i
'm
trying
to
avoid
lot
of
level
of
abstract
base
class
-
the
class
implementing
these
model
mostly
already
have
base
class
.
i
think
this
model
could
be
more
maintainable
and
le
overly-coupled
than
adding
further
object
hierarchy
.
is
this
what
ms
have
done
to
ienumerable
and
iqueryable
for
linq
?